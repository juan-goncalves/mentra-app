plugins {
    id "com.android.application"
    id "com.google.android.gms.oss-licenses-plugin"
    id "kotlin-android"
    id "kotlin-android-extensions"
    id "kotlin-kapt"
    id "dagger.hilt.android.plugin"
    id "jacoco"
    id "com.google.gms.google-services"
    id "com.google.firebase.crashlytics"
}

android {
    compileSdkVersion Versions.compile_sdk
    buildToolsVersion "29.0.3"
    testOptions.unitTests.includeAndroidResources = true

    defaultConfig {
        applicationId "me.juangoncalves.mentra"
        minSdkVersion Versions.min_sdk
        targetSdkVersion Versions.target_sdk
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        viewBinding true
    }
    kapt {
        correctErrorTypes true
    }
}

dependencies {
    implementation project(path: ':domain-layer')
    implementation project(path: ':data-layer')
    implementation project(path: ':android-cache')
    implementation project(path: ':android-network')
    implementation project(path: ':pie-chart-view')

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    implementation Deps.androidx_core_ktx
    implementation Deps.androidx_appcompat
    implementation Deps.androidx_activity_ktx
    implementation Deps.androidx_fragment_ktx
    implementation Deps.androidx_preference_ktx
    implementation Deps.androidx_constraint_layout
    implementation Deps.androidx_swipe_refresh_layout
    implementation Deps.androidx_viewpager2
    implementation Deps.androidx_work_ktx
    implementation Deps.androidx_lifecycle_viewmodel_ktx
    implementation Deps.androidx_lifecycle_saved_state
    implementation Deps.androidx_lifecycle_livedata_ktx
    implementation Deps.google_material
    implementation Deps.google_oss_licenses

    implementation Deps.dagger_hilt
    implementation Deps.androidx_hilt_work
    implementation Deps.androidx_hilt_lifecycle_viewmodel

    implementation Deps.glide
    implementation Deps.fading_edge_layout
    implementation Deps.mp_android_chart

    implementation platform(Deps.firebase_platform)
    implementation Deps.firebase_analytics
    implementation Deps.firebase_crashlytics

    kapt Deps.dagger_hilt_androidx_compiler
    kapt Deps.dagger_hilt_compiler
    kapt Deps.androidx_lifecycle_compiler

    kaptTest Deps.dagger_hilt_compiler

    testImplementation project(path: ':test-utils')
    testImplementation Deps.junit
    testImplementation Deps.hamcrest
    testImplementation Deps.mockk
    testImplementation Deps.androidx_core_testing
    testImplementation Deps.dagger_hilt_android_testing
    testImplementation Deps.robolectric
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.1"

    androidTestImplementation Deps.androidx_junit
    androidTestImplementation Deps.espresso
    androidTestImplementation Deps.androidx_work_testing
}

jacoco {
    toolVersion = '0.8.5'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(
        type: JacocoReport,
        dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']
) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilters = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*'
    ]

    def debugTree = fileTree(
            dir: "$project.buildDir/tmp/kotlin-classes/debug",
            excludes: fileFilters
    )

    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(
            dir: project.buildDir,
            includes: [
                    'jacoco/testDebugUnitTest.exec',
                    'outputs/code-coverage/connected/*coverage.ec'
            ]
    )
}