plugins {
    id "com.android.application"
    id "com.google.android.gms.oss-licenses-plugin"
    id "kotlin-android"
    id "kotlin-android-extensions"
    id "kotlin-kapt"
    id "dagger.hilt.android.plugin"
    id "jacoco"
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    testOptions.unitTests.includeAndroidResources = true

    defaultConfig {
        applicationId "me.juangoncalves.mentra"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        viewBinding true
    }
    kapt {
        correctErrorTypes true
    }
}

dependencies {
    def lifecycle_version = "2.3.0-alpha05"
    def work_version = "2.4.0"

    implementation project(path: ':domain-layer')
    implementation project(path: ':data-layer')
    implementation project(path: ':android-cache')
    implementation project(path: ':android-network')
    implementation project(path: ':pie')

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    implementation "androidx.core:core-ktx:1.5.0-alpha01"
    implementation "androidx.appcompat:appcompat:1.3.0-alpha01"
    implementation "androidx.activity:activity-ktx:1.1.0"
    implementation "androidx.fragment:fragment-ktx:1.3.0-alpha08"
    implementation "androidx.preference:preference-ktx:1.1.1"
    implementation "androidx.appcompat:appcompat:1.1.0"
    implementation "androidx.constraintlayout:constraintlayout:2.0.0-rc1"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    implementation "com.google.dagger:hilt-android:$hilt_version"
    implementation "androidx.hilt:hilt-work:1.0.0-alpha01"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha01"

    implementation "com.google.android.material:material:1.2.1"
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    implementation "com.github.bosphere.android-fadingedgelayout:fadingedgelayout:1.0.0"
    implementation "com.github.PhilJay:MPAndroidChart:v3.1.0"
    implementation "androidx.viewpager2:viewpager2:1.0.0"

    implementation "androidx.work:work-runtime-ktx:$work_version"

    implementation "com.google.android.gms:play-services-oss-licenses:17.0.0"

    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    kapt "androidx.hilt:hilt-compiler:1.0.0-alpha01"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"

    kaptTest "com.google.dagger:hilt-android-compiler:$hilt_version"

    testImplementation project(path: ':test-utils')
    testImplementation "junit:junit:4.13"
    testImplementation "org.hamcrest:hamcrest-library:2.2"
    testImplementation "io.mockk:mockk:1.10.0"
    testImplementation "androidx.arch.core:core-testing:$arch_version"
    testImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    testImplementation "org.robolectric:robolectric:4.3"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.1"

    androidTestImplementation "androidx.test.ext:junit:1.1.1"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.2.0"
    androidTestImplementation "androidx.work:work-testing:$work_version"
}

jacoco {
    toolVersion = '0.8.5'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(
        type: JacocoReport,
        dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']
) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilters = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*'
    ]

    def debugTree = fileTree(
            dir: "$project.buildDir/tmp/kotlin-classes/debug",
            excludes: fileFilters
    )

    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(
            dir: project.buildDir,
            includes: [
                    'jacoco/testDebugUnitTest.exec',
                    'outputs/code-coverage/connected/*coverage.ec'
            ]
    )
}